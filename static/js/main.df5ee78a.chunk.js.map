{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","services/validation.js","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","target","rel","MoviesList","movies","map","imdbId","validationPattern","validateField","fieldValue","test","trim","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","errorMsg","setErrorMsg","htmlFor","type","classNames","e","onBlur","fieldName","NewMovie","onAdd","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","allRequiredFieldsAreFilled","allLinksAreValidated","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","newMovie","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df5ee78a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} target=\"_blank\" rel=\"noreferrer\">IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// eslint-disable-next-line\nconst validationPattern= /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const validateField\n= (fieldValue) => validationPattern.test(fieldValue.trim());\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { validateField } from '../../services/validation';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  const handleOnBlur = (e: React.FocusEvent<HTMLInputElement, Element>) => {\n    const { name: fieldName, value: fieldValue } = e.target;\n\n    if (required && !fieldValue.trim()) {\n      setErrorMsg(`${label} is required`);\n\n      return;\n    }\n\n    if ((fieldName === 'imgUrl' || fieldName === 'imdbUrl')\n        && !validateField(fieldValue)) {\n      setErrorMsg(`${label} format is wrong`);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setErrorMsg('');\n    onChange(e.target.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': errorMsg,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleInputChange}\n          onBlur={handleOnBlur}\n        />\n      </div>\n\n      {errorMsg && (\n        <p className=\"help is-danger\">{errorMsg}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { validateField } from '../../services/validation';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie:React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const allRequiredFieldsAreFilled = title.trim()\n  && imgUrl.trim()\n  && imdbUrl.trim()\n  && imdbId.trim();\n\n  const allLinksAreValidated = validateField(imgUrl) && validateField(imdbUrl);\n\n  const clearFormFields = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    clearFormFields();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      onSubmit={handleFormSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n        placeholder=\"Enter a description (optional)\"\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!allRequiredFieldsAreFilled || !allLinksAreValidated}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}